Developing a Java Servlet 
(It involves several key steps and requires a servlet container like Apache Tomcat)

Step-by-step instructions for developing Java WebApp and deploying it are as under:

1. Setup the Environment:
    •	Install Java Development Kit (JDK): Ensure you have a compatible JDK installed on your system.
    •	Install a Servlet Container: Download and install a servlet container such as Apache Tomcat.
    •	Choose an IDE (Optional but Recommended): Use an Integrated Development Environment (IDE) like Eclipse, IntelliJ IDEA, 
      or NetBeans for easier development and deployment.

2. Create the Servlet Class:
    •	Extend HttpServlet:
        Create a new Java class that extends javax.servlet.http.HttpServlet. 
        This class provides methods to handle HTTP requests.
    •	Override doGet() or doPost():
        Implement the doGet() method to handle HTTP GET requests or doPost() to handle HTTP POST requests. 
        You can override both if your servlet needs to handle both types of requests.
    •	Implement Logic:
        Inside the overridden methods, write the Java code to process the client's request (e.g., retrieve parameters, 
        interact with a database) and generate an HTTP response.
    •	Send Response:
        Obtain a PrintWriter object from the HttpServletResponse object and use its print() or println() methods to 
        write HTML or other content back to the client.

Example Servlet Class (MyServlet.java):

import java.io.IOException;
import java.io.PrintWriter;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class MyServlet extends HttpServlet {
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        response.setContentType("text/html"); // Set content type of the response
        PrintWriter out = response.getWriter(); // Get the output stream

        out.println("<html>");
        out.println("<head><title>My First Servlet</title></head>");
        out.println("<body>");
        out.println("<h1>Hello from MyServlet!</h1>");
        out.println("</body>");
        out.println("</html>");

        out.close(); // Close the output stream
    }
}

3. Configure web.xml (Deployment Descriptor):
    •	Create web.xml:
        In your web application's WEB-INF directory, create a web.xml file. 
        This file configures how your servlet container maps URLs to your servlets.
    •	Declare and Map Servlet:
        Define your servlet and map it to a URL pattern using <servlet> and <servlet-mapping> tags.

Example web.xml:

<!DOCTYPE web-app PUBLIC
 "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
 "http://java.sun.com/dtd/web-app_2_3.dtd" >

<web-app>
  <display-name>My Servlet Application</display-name>

  <servlet>
    <servlet-name>MyServlet</servlet-name>
    <servlet-class>MyServlet</servlet-class>
  </servlet>

  <servlet-mapping>
    <servlet-name>MyServlet</servlet-name>
    <url-pattern>/myservlet</url-pattern>
  </servlet-mapping>
</web-app>

4. Compile and Deploy:
    •	Compile: Compile your Java servlet class using a Java compiler (e.g., javac MyServlet.java). 
      Ensure the servlet-api.jar (provided by your servlet container) is in your classpath during compilation.
    •	Package: Create a Web Application Archive (WAR) file or manually place your compiled .class files and web.xml in 
      the appropriate directory structure within your servlet container's webapps folder.
    •	Start Server: Start your servlet container (e.g., Apache Tomcat).

5. Access the Servlet:
    •	Open your web browser and navigate to the URL mapped to your servlet (e.g., http://localhost:8080/YourWebAppName/myservlet). 
      The output generated by your servlet will be displayed in the browser.

